y = "Number of Passengers") +
scale_fill_manual(name = "",
labels = c("First Class", "Second Class", "Third Class"),
values = c("darkorchid1", "gold1", "darkslategray2")) +
theme_minimal()
Plot4_2
Plot4_2 <- Data_Age_Hist %>% ggplot(aes(x = age, y = Freq, fill = pclass)) +
geom_bar(position = "identity", stat = "identity", alpha = 0.6)+
facet_wrap(~pclass, scales = "free_y") +
labs(title = "Histogram of Age Across Classes Aboard The Titanic",
x = "Age",
y = "Number of Passengers") +
scale_fill_manual(name = "",
labels = c("First Class", "Second Class", "Third Class"),
values = c("darkorchid1", "darkgoldenrod1", "darkslategray2")) +
theme_minimal()
Plot4_2
Plot4_2
?facet_wrap
Plot4_2 <- Data_Age_Hist %>% ggplot(aes(x = age, y = Freq, fill = pclass)) +
geom_bar(position = "identity", stat = "identity", alpha = 0.6)+
facet_wrap(~pclass, scales = "fixed") +
labs(title = "Histogram of Age Across Classes Aboard The Titanic",
x = "Age",
y = "Number of Passengers") +
scale_fill_manual(name = "",
labels = c("First Class", "Second Class", "Third Class"),
values = c("darkorchid1", "darkgoldenrod1", "darkslategray2")) +
theme_minimal()
Plot4_2
Plot4_2 <- Data_Age_Hist %>% ggplot(aes(x = age, y = Freq, fill = pclass)) +
geom_bar(position = "identity", stat = "identity", alpha = 0.6)+
facet_wrap(~pclass, scales = "free_x") +
labs(title = "Histogram of Age Across Classes Aboard The Titanic",
x = "Age",
y = "Number of Passengers") +
scale_fill_manual(name = "",
labels = c("First Class", "Second Class", "Third Class"),
values = c("darkorchid1", "darkgoldenrod1", "darkslategray2")) +
theme_minimal()
Plot4_2
Plot4_2 <- Data_Age_Hist %>% ggplot(aes(x = age, y = Freq, fill = pclass)) +
geom_bar(position = "identity", stat = "identity", alpha = 0.6)+
facet_wrap(~pclass, scales = "fixed") +
labs(title = "Histogram of Age Across Classes Aboard The Titanic",
x = "Age",
y = "Number of Passengers") +
scale_fill_manual(name = "",
labels = c("First Class", "Second Class", "Third Class"),
values = c("darkorchid1", "darkgoldenrod1", "darkslategray2")) +
theme_minimal()
Plot4_2
Plot4_2 <- Data_Age_Hist %>% ggplot(aes(x = age, y = Freq, fill = pclass)) +
geom_bar(position = "identity", stat = "identity", alpha = 0.6)+
facet_wrap(~pclass, scales = "fixed") +
labs(title = "Histogram of Age Across Classes Aboard The Titanic",
x = "Age",
y = "Number of Passengers") +
scale_fill_manual(name = "",
labels = c("First Class", "Second Class", "Third Class"),
values = c("darkorchid1", "darkgoldenrod1", "darkslategray4")) +
theme_minimal()
Plot4_2
Plot4_2 <- Data_Age_Hist %>% ggplot(aes(x = age, y = Freq, fill = pclass)) +
geom_bar(position = "identity", stat = "identity", alpha = 0.6)+
facet_wrap(~pclass, scales = "fixed") +
labs(title = "Histogram of Age Across Classes Aboard The Titanic",
x = "Age",
y = "Number of Passengers") +
scale_fill_manual(name = "",
labels = c("First Class", "Second Class", "Third Class"),
values = c("darkorchid1", "darkgoldenrod1", "darkslategray3")) +
theme_minimal()
Plot4_2
library(moments)
install.packages("moments")
library(moments)
View(Data_Age_Hist)
Data_Logit <- read_csv("data/Titanic_csv.csv")
View(Data_Logit)
Data_Logit <- read_csv("data/Titanic_csv.csv") %>%
filter(!is.na(age)) %>%
mutate(age = round(age)) %>%
select(pclass, survived, sex, age, sibsp, parch, fare)
Data_Logit$survived <- as.factor(Data_Logit$survived)
split <- initial_split(Data_Logit, prop = 0.75)
library(tidyverse)
library(caret)
library(rsample)
split <- initial_split(Data_Logit, prop = 0.75)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Data_Logit <- read_csv("data/Titanic_csv.csv") %>%
filter(!is.na(age) | !is.na(survived)) %>%
mutate(age = round(age)) %>%
select(pclass, survived, sex, age, sibsp, parch, fare)
Data_Logit$survived <- as.factor(Data_Logit$survived)
split <- initial_split(Data_Logit, prop = 0.75)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Data_Logit <- read_csv("data/Titanic_csv.csv") %>%
filter(!is.na(age)) %>% filter(!is.na(survived)) %>%
mutate(age = round(age)) %>%
select(pclass, survived, sex, age, sibsp, parch, fare)
Data_Logit$survived <- as.factor(Data_Logit$survived)
split <- initial_split(Data_Logit, prop = 0.75)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Data_Logit <- read_csv("data/Titanic_csv.csv") %>%
filter(!is.na(age)) %>% na.omit() %>%
mutate(age = round(age)) %>%
select(pclass, survived, sex, age, sibsp, parch, fare)
Data_Logit$survived <- as.factor(Data_Logit$survived)
split <- initial_split(Data_Logit, prop = 0.75)
Data_Logit <- read_csv("data/Titanic_csv.csv") %>%
filter(!is.na(age)) %>% na.omit() %>%
mutate(age = round(age)) %>%
select(pclass, survived, sex, age, sibsp, parch, fare)
Data_Logit$survived <- as.factor(Data_Logit$survived)
set.seed(7104)
split <- initial_split(Data_Logit, prop = 0.75)
rlang::last_trace()
Data_Logit <- read_csv("data/Titanic_csv.csv") %>%
filter(!is.na(age)) %>%
mutate(age = round(age)) %>%
select(pclass, survived, sex, age, sibsp, parch, fare)
Data_Logit <- read_csv("data/Titanic_csv.csv") %>%
filter(!is.na(age)) %>%
mutate(age = round(age)) %>%
select(pclass, survived, sex, age, sibsp, parch, fare) %>% na.omit()
Data_Logit$survived <- as.factor(Data_Logit$survived)
set.seed(7104)
split <- initial_split(Data_Logit, prop = 0.75)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Logit
library(kableExtra)
PredLogit <- predict(Logit, newdata = Test_data)
Conf_Logit <- confusionMatrix(PredLogit, Test_data$result)
PredLogit <- predict(Logit, newdata = Test_data)
Conf_Logit <- confusionMatrix(PredLogit, Test_data$survived)
print(PropLPM)
print(Conf_Logit)
logit_summary <- tidy(Logit$finalModel)
set.seed(123)
split <- initial_split(Data_Logit, prop = 0.75)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Logit
PredLogit <- predict(Logit, newdata = Test_data)
Conf_Logit <- confusionMatrix(PredLogit, Test_data$survived)
print(Conf_Logit)
set.seed(1234)
split <- initial_split(Data_Logit, prop = 0.75)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Logit
PredLogit <- predict(Logit, newdata = Test_data)
Conf_Logit <- confusionMatrix(PredLogit, Test_data$survived)
print(Conf_Logit)
set.seed(420)
split <- initial_split(Data_Logit, prop = 0.75)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Logit
PredLogit <- predict(Logit, newdata = Test_data)
Conf_Logit <- confusionMatrix(PredLogit, Test_data$survived)
print(Conf_Logit)
set.seed(4201)
split <- initial_split(Data_Logit, prop = 0.75)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Logit
PredLogit <- predict(Logit, newdata = Test_data)
Conf_Logit <- confusionMatrix(PredLogit, Test_data$survived)
print(Conf_Logit)
set.seed(7104)
split <- initial_split(Data_Logit, prop = 0.75)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Logit
PredLogit <- predict(Logit, newdata = Test_data)
Conf_Logit <- confusionMatrix(PredLogit, Test_data$survived)
print(Conf_Logit)
set.seed(7104)
split <- initial_split(Data_Logit, prop = 0.70)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Logit
PredLogit <- predict(Logit, newdata = Test_data)
Conf_Logit <- confusionMatrix(PredLogit, Test_data$survived)
print(Conf_Logit)
split <- initial_split(Data_Logit, prop = 0.80)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Logit
PredLogit <- predict(Logit, newdata = Test_data)
Conf_Logit <- confusionMatrix(PredLogit, Test_data$survived)
print(Conf_Logit)
Data_Logit <- read_csv("data/Titanic_csv.csv")
View(Data_Logit)
library(tidyverse)
library(caret)
library(rsample)
library(kableExtra)
Data_Logit <- read_csv("data/Titanic_csv.csv") %>%
filter(!is.na(age)) %>%
mutate(age = round(age)) %>%
mutate(got_boat = ifelse(!is.na(boat), 1, 0)) %>%
select(pclass, survived, sex, age, sibsp, parch, fare, got_boat) %>% na.omit()
Data_Logit$survived <- as.factor(Data_Logit$survived)
set.seed(7104)
split <- initial_split(Data_Logit, prop = 0.80)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Logit
PredLogit <- predict(Logit, newdata = Test_data)
Conf_Logit <- confusionMatrix(PredLogit, Test_data$survived)
print(Conf_Logit)
table_1 <- stargazer(Logit, type = "latex",
title = "Logistic Regression Results",
dep.var.labels = "Dependent Variable",
covariate.labels = c("Covariate 1", "Covariate 2", "Covariate 3"),
omit.stat = c("LL", "ser", "f"),
align = TRUE,
no.space = TRUE)
library(stargazer)
table_1 <- stargazer(Logit, type = "latex",
title = "Logistic Regression Results",
dep.var.labels = "Dependent Variable",
covariate.labels = c("Covariate 1", "Covariate 2", "Covariate 3"),
omit.stat = c("LL", "ser", "f"),
align = TRUE,
no.space = TRUE)
table_1 <- stargazer(Conf_Logit, type = "latex",
title = "Logistic Regression Results",
dep.var.labels = "Dependent Variable",
covariate.labels = c("Covariate 1", "Covariate 2", "Covariate 3"),
omit.stat = c("LL", "ser", "f"),
align = TRUE,
no.space = TRUE)
Logit_tab_mod <- Logit$finalModel
table_1 <- stargazer(Logit_tab_mod, type = "latex",
title = "Logistic Regression Results",
dep.var.labels = "Dependent Variable",
covariate.labels = c("Covariate 1", "Covariate 2", "Covariate 3"),
omit.stat = c("LL", "ser", "f"),
align = TRUE,
no.space = TRUE)
table_1 <- stargazer(Logit_tab_mod)
Data_Logit <- read_csv("data/Titanic_csv.csv") %>%
filter(!is.na(age)) %>%
mutate(age = round(age)) %>%
#mutate(got_boat = ifelse(!is.na(boat), 1, 0)) %>%
select(pclass, survived, sex, age, sibsp, parch, fare,
#got_boat
) %>% na.omit()
Data_Logit$survived <- as.factor(Data_Logit$survived)
set.seed(7104)
split <- initial_split(Data_Logit, prop = 0.80)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Logit
PredLogit <- predict(Logit, newdata = Test_data)
Conf_Logit <- confusionMatrix(PredLogit, Test_data$survived)
print(Conf_Logit)
final_Logit <- Logit$finalModel
Coeff <- final_Logit$coefficients
resid <- final_Logit$residuals
importance <- varImp(Logit, scale = F)
View(importance)
plot(importance, main = "Variable Importance - Logistic Regression")
Coeff
Data_Logit <- read_csv("data/Titanic_csv.csv") %>%
filter(!is.na(age)) %>%
mutate(age = round(age)) %>%
mutate(got_boat = ifelse(!is.na(boat), 1, 0)) %>%
select(pclass, survived, sex, age, sibsp, parch, fare,
got_boat
) %>% na.omit()
Data_Logit$survived <- as.factor(Data_Logit$survived)
set.seed(7104)
split <- initial_split(Data_Logit, prop = 0.80)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Logit
PredLogit <- predict(Logit, newdata = Test_data)
Conf_Logit <- confusionMatrix(PredLogit, Test_data$survived)
print(Conf_Logit)
final_Logit <- Logit$finalModel
Coeff <- final_Logit$coefficients
importance <- varImp(Logit, scale = F)
plot(importance, main = "Variable Importance - Logistic Regression")
Coeff
list.files('code/', full.names = T, recursive = T) %>% .[grepl('.R', .)] %>% as.list() %>% walk(~source(.))
Coeff <- final_Logit$coefficients
coeff
Coeff
View(Data_Age_Hist)
View(Data_Logit)
Rose_data <- data.frame(
pclass = 1,
sex = "female",
age = 17,
SibSp = 0,
Parch = 1,
Fare = 500,
)
Rose_data <- data.frame(
pclass = 1,
sex = "female",
age = 17,
SibSp = 0,
Parch = 1,
Fare = 500
)
Pred_Rose <- predict(Logit, newdata = Rose_data, type = "prob")
Rose_data <- data.frame(
pclass = 1,
sex = "female",
age = 17,
sibSp = 0,
parch = 1,
fare = 500
)
Pred_Rose <- predict(Logit, newdata = Rose_data, type = "prob")
Rose_data <- data.frame(
pclass = 1,
sex = "female",
age = 17,
sibsp = 0,
parch = 1,
fare = 500
)
Pred_Rose <- predict(Logit, newdata = Rose_data, type = "prob")
Data_Logit <- read_csv("data/Titanic_csv.csv") %>%
filter(!is.na(age)) %>%
mutate(age = round(age)) %>%
#mutate(got_boat = ifelse(!is.na(boat), 1, 0)) %>%
select(pclass, survived, sex, age, sibsp, parch, fare,
#got_boat
) %>% na.omit()
Data_Logit$survived <- as.factor(Data_Logit$survived)
set.seed(7104)
split <- initial_split(Data_Logit, prop = 0.80)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Logit
PredLogit <- predict(Logit, newdata = Test_data)
Conf_Logit <- confusionMatrix(PredLogit, Test_data$survived)
print(Conf_Logit)
Rose_data <- data.frame(
pclass = 1,
sex = "female",
age = 17,
sibsp = 0,
parch = 1,
fare = 500
)
Pred_Rose <- predict(Logit, newdata = Rose_data, type = "prob")
Pred_Rose
Pred_Jack <- predict(Logit, newdata = Jack_data, type = "prob")
Jack_data <- data.frame(
pclass = 3,
sex = "male",
age = 20,
sibsp = 0,
parch = 0,
fare = 0
)
Pred_Jack <- predict(Logit, newdata = Jack_data, type = "prob")
Pred_Jack
Pred_Rose
VIP_B_Plot <- plot(importance, main = "Variable Importance - Logistic Regression")
View(VIP_B_Plot)
print(Conf_Logit)
VIP_B_Plot
final_Logit <- Logit$finalModel
Coeff <- final_Logit$coefficients
importance <- varImp(Logit, scale = F)
VIP_B_Plot <- plot(importance, main = "Variable Importance - Logistic Regression")
VIP_B_Plot
Data_Logit <- read_csv("data/Titanic_csv.csv") %>%
filter(!is.na(age)) %>%
mutate(age = round(age)) %>%
mutate(got_boat = ifelse(!is.na(boat), 1, 0)) %>%
select(pclass, survived, sex, age, sibsp, parch, fare,
got_boat
) %>% na.omit()
Data_Logit$survived <- as.factor(Data_Logit$survived)
set.seed(7104)
split <- initial_split(Data_Logit, prop = 0.80)
Train_data <- training(split)
Test_data <- testing(split)
Logit <- train(
survived ~ . ,
data = Train_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "cv", number = 10)
)
Logit
PredLogit <- predict(Logit, newdata = Test_data)
Conf_Logit <- confusionMatrix(PredLogit, Test_data$survived)
print(Conf_Logit)
final_Logit <- Logit$finalModel
Coeff <- final_Logit$coefficients
